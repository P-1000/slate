{"id":"8aguwvv4d","type":"text","content":"Type '{ theme: Theme; setTheme: (theme: Theme) => void; isDark: boolean; colorPalette: ColorPalette; setColorPalette: (palette: ColorPalette) => void; ... 6 more ...; onClose: () => void; }' is not assignable to type 'IntrinsicAttributes & SettingsPanelProps'.\n  Property 'theme' does not exist on type 'IntrinsicAttributes & SettingsPanelProps'.ts(2322)","timestamp":1745781529160,"metadata":null,"_id":"009xp1ckQ49nQDgR"}
{"id":"11pdo3nt9","type":"text","content":"Error occurred in handler for 'set-window-opacity': Error: No handler registered for 'set-window-opacity'\n    at WebContents.<anonymous> (node:electron/js2c/browser_init:2:83054)\n    at WebContents.emit (node:events:519:28)\nError occurred in handler for 'set-window-opacity': Error: No handler registered for 'set-window-opacity'\n    at WebContents.<anonymous> (node:electron/js2c/browser_init:2:83054)\n    at WebContents.emit (node:events:519:28)\n\n","timestamp":1745782430246,"metadata":null,"_id":"1AaTWCgq6A7YFn7F"}
{"id":"fayqqqpnc","type":"text","content":"Property 'setWindowOpacity' does not exist on type 'IpcRenderer'.ts(2339)\n","timestamp":1745781324681,"metadata":null,"_id":"3LXge3jHu8iQxbvu"}
{"id":"8cm0d4o5t","type":"text","content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Roboto:wght@300;400;500;700&family=Poppins:wght@300;400;500;600;700&family=Montserrat:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&family=Source+Code+Pro:wght@300;400;500;600;700&family=Open+Sans:wght@300;400;500;600;700&family=Lato:wght@300;400;700&display=swap');\r\n\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n\r\n:root {\r\n  --blur-amount: 10px;\r\n  \r\n  /* Default palette */\r\n  --primary-color: #10b981;\r\n  --primary-light: #d1fae5;\r\n  --primary-dark: #059669;\r\n}\r\n\r\n/* Color palette variations */\r\n[data-palette=\"blue\"] {\r\n  --primary-color: #3b82f6;\r\n  --primary-light: #dbeafe;\r\n  --primary-dark: #2563eb;\r\n}\r\n\r\n[data-palette=\"purple\"] {\r\n  --primary-color: #8b5cf6;\r\n  --primary-light: #ede9fe;\r\n  --primary-dark: #7c3aed;\r\n}\r\n\r\n[data-palette=\"green\"] {\r\n  --primary-color: #22c55e;\r\n  --primary-light: #dcfce7;\r\n  --primary-dark: #16a34a;\r\n}\r\n\r\n[data-palette=\"orange\"] {\r\n  --primary-color: #f97316;\r\n  --primary-light: #ffedd5;\r\n  --primary-dark: #ea580c;\r\n}\r\n\r\n[data-palette=\"pink\"] {\r\n  --primary-color: #ec4899;\r\n  --primary-light: #fce7f3;\r\n  --primary-dark: #db2777;\r\n}\r\n\r\n[data-palette=\"cyan\"] {\r\n  --primary-color: #06b6d4;\r\n  --primary-light: #cffafe;\r\n  --primary-dark: #0891b2;\r\n}\r\n\r\n[data-palette=\"amber\"] {\r\n  --primary-color: #f59e0b;\r\n  --primary-light: #fef3c7;\r\n  --primary-dark: #d97706;\r\n}\r\n\r\n/* Apply CSS variables to Tailwind classes */\r\n.bg-primary-500 {\r\n  background-color: var(--primary-color);\r\n}\r\n\r\n.text-primary-500 {\r\n  color: var(--primary-color);\r\n}\r\n\r\n.ring-primary-500 {\r\n  --tw-ring-color: var(--primary-color);\r\n}\r\n\r\n.border-primary-500 {\r\n  border-color: var(--primary-color);\r\n}\r\n\r\n/* Backdrop blur using the variable */\r\n.backdrop-blur-custom {\r\n  backdrop-filter: blur(var(--blur-amount));\r\n}\r\n\r\n/* Font family utilities */\r\n.font-system {\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;\r\n}\r\n\r\n.font-inter {\r\n  font-family: 'Inter', sans-serif;\r\n}\r\n\r\n.font-roboto {\r\n  font-family: 'Roboto', sans-serif;\r\n}\r\n\r\n.font-poppins {\r\n  font-family: 'Poppins', sans-serif;\r\n}\r\n\r\n.font-montserrat {\r\n  font-family: 'Montserrat', sans-serif;\r\n}\r\n\r\n.font-playfair {\r\n  font-family: 'Playfair Display', serif;\r\n}\r\n\r\n.font-source-code-pro {\r\n  font-family: 'Source Code Pro', monospace;\r\n}\r\n\r\n.font-open-sans {\r\n  font-family: 'Open Sans', sans-serif;\r\n}\r\n\r\n.font-lato {\r\n  font-family: 'Lato', sans-serif;\r\n}\r\n\r\n/* Add some fluid UI utilities */\r\n.glass-morphism {\r\n  @apply bg-white/10 dark:bg-dark-900/20 backdrop-blur-md border border-white/20 dark:border-dark-700/30;\r\n}\r\n\r\n.glass-morphism-dark {\r\n  @apply bg-dark-900/30 backdrop-blur-md border border-dark-800/50;\r\n}\r\n\r\n.glass-morphism-light {\r\n  @apply bg-white/30 backdrop-blur-md border border-gray-200/50;\r\n}\r\n\r\n.glass-panel {\r\n  @apply rounded-xl shadow-lg;\r\n}\r\n\r\n.glass-input {\r\n  @apply bg-white/20 dark:bg-dark-800/30 border border-white/30 dark:border-dark-700/30 backdrop-blur-sm focus:ring-2 focus:ring-primary-500/50 focus:border-transparent;\r\n}\r\n\r\n.glass-button {\r\n  @apply bg-white/10 dark:bg-dark-900/30 hover:bg-white/20 dark:hover:bg-dark-800/40 backdrop-blur-sm border border-white/20 dark:border-dark-700/30;\r\n}\r\n\r\n/* Animations */\r\n@keyframes float {\r\n  0% { transform: translateY(0px); }\r\n  50% { transform: translateY(-5px); }\r\n  100% { transform: translateY(0px); }\r\n}\r\n\r\n.animate-float {\r\n  animation: float 3s ease-in-out infinite;\r\n}","timestamp":1745780020128,"metadata":null,"_id":"4YufUwFA3fB4ENcY"}
{"id":"jth34vvxy","type":"text","content":"import * as React from \"react\";\r\nimport { AnimatePresence } from \"framer-motion\";\r\nimport { useTheme } from \"./ThemeContext\";\r\nimport { cn } from \"./utils/cn\";\r\nimport { Sidebar } from \"./components/Sidebar\";\r\nimport { ContentPanel } from \"./components/ContentPanel\";\r\nimport { SettingsPanel } from \"./components/SettingsPanel\";\r\nimport { SearchHeader } from \"./components/SearchHeader\";\r\nimport { useClipboard } from \"./hooks/useClipboard\";\r\nimport { useFilteredClipboard } from \"./hooks/useFilteredClipboard\";\r\nimport { useWindowManagement } from \"./hooks/useWindowManagement\";\r\nimport { formatDate, getTypeIcon } from \"./utils/clipboardUtils\";\r\nimport { ErrorBoundary } from \"./components/ErrorBoundary\";\r\nimport { ToastProvider, useToast } from \"./components/Toast\";\r\n\r\nconst ClipboardManagerContent: React.FC = () => {\r\n  const { theme, setTheme, isDark, colorPalette, setColorPalette, fontFamily, setFontFamily, blurAmount, setBlurAmount, windowOpacity, setWindowOpacity } = useTheme();\r\n  const [searchQuery, setSearchQuery] = React.useState(\"\");\r\n  const [activeTab, setActiveTab] = React.useState<'all' | 'text' | 'link' | 'image'>('all');\r\n  const [showSettings, setShowSettings] = React.useState(false);\r\n  const { showToast } = useToast();\r\n  \r\n  // Use custom hooks\r\n  useWindowManagement();\r\n  \r\n  const {\r\n    clipboardData,\r\n    isLoading,\r\n    error,\r\n    setError,\r\n    selectedItem,\r\n    setSelectedItem,\r\n    fetchClipboardData,\r\n    deleteItem,\r\n    togglePin,\r\n    copyToClipboard,\r\n    isElectronAvailable\r\n  } = useClipboard();\r\n  \r\n  const { filteredPinnedItems, filteredUnpinnedItems } = useFilteredClipboard(\r\n    clipboardData,\r\n    searchQuery,\r\n    activeTab\r\n  );\r\n\r\n  // Show toast for errors\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      showToast(error, \"error\");\r\n      setError(null);\r\n    }\r\n  }, [error, showToast, setError]);\r\n\r\n  // Wrap operations with error handling and toast notifications\r\n  const handleDeleteItem = async (id: string) => {\r\n    try {\r\n      await deleteItem(id);\r\n      showToast(\"Item deleted successfully\", \"success\");\r\n    } catch (error) {\r\n      // Error is already handled in the hook\r\n    }\r\n  };\r\n\r\n  const handleTogglePin = async (id: string) => {\r\n    try {\r\n      await togglePin(id);\r\n      const item = clipboardData.find(item => item.id === id);\r\n      showToast(\r\n        item?.pinned \r\n          ? \"Item unpinned successfully\" \r\n          : \"Item pinned successfully\", \r\n        \"success\"\r\n      );\r\n    } catch (error) {\r\n      // Error is already handled in the hook\r\n    }\r\n  };\r\n\r\n  const handleCopyToClipboard = async (content: string) => {\r\n    try {\r\n      await copyToClipboard(content);\r\n      showToast(\"Copied to clipboard\", \"success\");\r\n    } catch (error) {\r\n      // Error is already handled in the hook\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div \r\n      className={cn(\r\n        \"flex h-screen overflow-hidden transition-colors duration-300\",\r\n        `font-${fontFamily}`,\r\n        isDark \r\n          ? \"bg-dark-950/90 text-white\" \r\n          : \"bg-gray-50/90 text-gray-900\"\r\n      )}\r\n      style={{ \r\n        \"--blur-amount\": `${blurAmount}px` \r\n      } as React.CSSProperties}\r\n    >\r\n      {!isElectronAvailable && !isLoading && (\r\n        <div className=\"fixed inset-0 flex items-center justify-center z-50 bg-dark-900/80 backdrop-blur-md\">\r\n          <div className=\"bg-white dark:bg-dark-800 p-6 rounded-lg shadow-xl max-w-md text-center\">\r\n            <h2 className=\"text-xl font-semibold mb-4\">Electron Environment Required</h2>\r\n            <p className=\"mb-4\">\r\n              The clipboard manager requires the Electron environment to function properly. \r\n              It appears you're running the app in a browser or the Electron IPC bridge is not available.\r\n            </p>\r\n            <button\r\n              onClick={() => window.location.reload()}\r\n              className=\"px-4 py-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors\"\r\n            >\r\n              Reload Application\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Unified Search Header */}\r\n      <ErrorBoundary>\r\n        <SearchHeader\r\n          searchQuery={searchQuery}\r\n          setSearchQuery={setSearchQuery}\r\n          activeTab={activeTab}\r\n          setActiveTab={setActiveTab}\r\n          isDark={isDark}\r\n          setShowSettings={setShowSettings}\r\n        />\r\n      </ErrorBoundary>\r\n\r\n      {/* Left Sidebar */}\r\n      <ErrorBoundary>\r\n        <Sidebar \r\n          isDark={isDark}\r\n          searchQuery={searchQuery}\r\n          setSearchQuery={setSearchQuery}\r\n          activeTab={activeTab}\r\n          setActiveTab={setActiveTab}\r\n          isLoading={isLoading}\r\n          error={error}\r\n          filteredPinnedItems={filteredPinnedItems}\r\n          filteredUnpinnedItems={filteredUnpinnedItems}\r\n          selectedItem={selectedItem}\r\n          setSelectedItem={setSelectedItem}\r\n          deleteItem={handleDeleteItem}\r\n          togglePin={handleTogglePin}\r\n          copyToClipboard={handleCopyToClipboard}\r\n          fetchClipboardData={fetchClipboardData}\r\n          formatDate={formatDate}\r\n          getTypeIcon={getTypeIcon}\r\n          setShowSettings={setShowSettings}\r\n        />\r\n      </ErrorBoundary>\r\n\r\n      {/* Content Panel */}\r\n      <ErrorBoundary>\r\n        <ContentPanel \r\n          selectedItem={selectedItem}\r\n          isDark={isDark}\r\n          togglePin={handleTogglePin}\r\n          copyToClipboard={handleCopyToClipboard}\r\n          deleteItem={handleDeleteItem}\r\n          formatDate={formatDate}\r\n        />\r\n      </ErrorBoundary>\r\n\r\n      {/* Settings Panel */}\r\n      <AnimatePresence>\r\n        {showSettings && (\r\n          <ErrorBoundary>\r\n            <SettingsPanel \r\n              theme={theme}\r\n              setTheme={setTheme}\r\n              isDark={isDark}\r\n              colorPalette={colorPalette}\r\n              setColorPalette={setColorPalette}\r\n              fontFamily={fontFamily}\r\n              setFontFamily={setFontFamily}\r\n              blurAmount={blurAmount}\r\n              setBlurAmount={setBlurAmount}\r\n              windowOpacity={windowOpacity}\r\n              setWindowOpacity={setWindowOpacity}\r\n              onClose={() => setShowSettings(false)}\r\n            />\r\n          </ErrorBoundary>\r\n        )}\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function ClipboardManager() {\r\n  return (\r\n    <ErrorBoundary>\r\n      <ToastProvider>\r\n        <ClipboardManagerContent />\r\n      </ToastProvider>\r\n    </ErrorBoundary>\r\n  );\r\n}","timestamp":1745781949029,"metadata":null,"_id":"CI0JjNLNS5wiEAcE"}
{"id":"3ze5q80e5","type":"text","content":"[75805:0428/011302.428832:ERROR:gpu_process_host.cc(997)] GPU process exited unexpectedly: exit_code=15\n[75805:0428/011302.432061:ERROR:network_service_instance_impl.cc(599)] Network service crashed, restarting service.\nError getting GPU info: TypeError: systemPreferences.getGPUInfo is not a function\n    at file:///Users/admin/CODE-/slate/dist-electron/main.js:4601:49","timestamp":1745782986107,"metadata":null,"_id":"DshO5T7WPtyFouVX"}
{"id":"jxmrfqs1b","type":"link","content":"https://github.com/P-1000/slate.git","timestamp":1745779242754,"metadata":null,"_id":"IWTwRhzlukLS3Glt","pinned":true}
{"id":"p0lydsorz","type":"text","content":"  npx update-browserslist-db@latest","timestamp":1745781591979,"metadata":null,"_id":"NNfzppHpI9tVC2ZF"}
{"id":"z4jflis4j","type":"text","content":"import { IpcRenderer } from 'electron';\nimport { ClipboardItem } from './types';\n\ndeclare global {\n  interface Window {\n    ipcRenderer: IpcRenderer & {\n      getClipboardData(): Promise<ClipboardItem[]>; // Declare custom method\n      deleteClipboardData(id: string): Promise<boolean>;\n      pinClipboardData(id: string): Promise<ClipboardItem>;\n      copyToClipboard(content: string): Promise<boolean>;\n      unpinClipboardData(id: string): Promise<ClipboardItem>;\n      getPinnedClipboardData(): Promise<ClipboardItem[]>;\n      invoke(channel: string, ...args: any[]): Promise<any>;\n      send(channel: string, ...args: any[]): void;\n      on(channel: string, listener: (...args: any[]) => void): IpcRenderer;\n      once(channel: string, listener: (...args: any[]) => void): IpcRenderer;\n      off(channel: string, listener: (...args: any[]) => void): IpcRenderer;\n    };\n  }\n}\n\nexport {};\n","timestamp":1745781192659,"metadata":null,"_id":"PWKEo61qcIQN17md"}
{"id":"2qsdqehq0","type":"text","content":"[71056:0428/010612.227403:ERROR:network_service_instance_impl.cc(599)] Network service crashed, restarting service.\n[71056:0428/010612.235791:ERROR:gpu_process_host.cc(997)] GPU process exited unexpectedly: exit_code=15\n2025-04-28 01:06:14.228 Electron[71087:6228434] +[IMKClient subclass]: chose IMKClient_Modern\n2025-04-28 01:06:14.228 Electron[71087:6228434] +[IMKInputSession subclass]: chose IMKInputSession_Modern\n","timestamp":1745782582432,"metadata":null,"_id":"PtgcGH4rtmFbAkiG"}
{"id":"6sh1o21ig","type":"text","content":"F900-23DE","timestamp":1745783876601,"metadata":null,"_id":"Q4ZRX2D0Jyn64hVi"}
{"id":"hp4fackqd","type":"text","content":"Subsequent property declarations must have the same type.  Property 'ipcRenderer' must be of type 'IpcRenderer', but here has type 'IpcRenderer & { getClipboardData(): Promise<ClipboardItem[]>; deleteClipboardData(id: string): Promise<boolean>; pinClipboardData(id: string): Promise<...>; unpinClipboardData(id: string): Promise<...>; copyToClipboard(content: string): Promise<...>; getPinnedClipboardData(): Promise<...>; setWindowOpacity(opacity: ...'.ts(2717)\n","timestamp":1745782140965,"metadata":null,"_id":"RckDI5ypLXKfKex2"}
{"id":"osilsw3ho","type":"text","content":"electron-clipboard-extended","timestamp":1745780863266,"metadata":null,"_id":"RtR9jEce3pZyVUEL"}
{"id":"xaa4miua2","type":"text","content":"Error during app initialization: Error: app.disableHardwareAcceleration() can only be called before app is ready\n    at file:///Users/admin/CODE-/slate/dist-electron/main.js:4613:11","timestamp":1745783606607,"metadata":null,"_id":"S648WQvmOLoQS22Q"}
{"id":"svlifo7iq","type":"text","content":"[88866:0428/012953.342926:ERROR:network_service_instance_impl.cc(599)] Network service crashed, restarting service.\n[88866:0428/012953.343425:ERROR:gpu_process_host.cc(997)] GPU process exited unexpectedly: exit_code=15","timestamp":1745783996535,"metadata":null,"_id":"S7VD47nJFY6ElJrg"}
{"id":"gzyuazt9a","type":"text","content":"import * as React from \"react\";\nimport { AnimatePresence } from \"framer-motion\";\nimport { useTheme } from \"./ThemeContext\";\nimport { cn } from \"./utils/cn\";\nimport { Sidebar } from \"./components/Sidebar\";\nimport { ContentPanel } from \"./components/ContentPanel\";\nimport { SettingsPanel } from \"./components/SettingsPanel\";\nimport { SearchHeader } from \"./components/SearchHeader\";\nimport { useClipboard } from \"./hooks/useClipboard\";\nimport { useFilteredClipboard } from \"./hooks/useFilteredClipboard\";\nimport { useWindowManagement } from \"./hooks/useWindowManagement\";\nimport { formatDate, getTypeIcon } from \"./utils/clipboardUtils\";\nimport { ErrorBoundary } from \"./components/ErrorBoundary\";\nimport { ToastProvider, useToast } from \"./components/Toast\";\n\nconst ClipboardManagerContent: React.FC = () => {\n  const { theme, setTheme, isDark, colorPalette, setColorPalette, fontFamily, setFontFamily, blurAmount, setBlurAmount, windowOpacity, setWindowOpacity } = useTheme();\n  const [searchQuery, setSearchQuery] = React.useState(\"\");\n  const [activeTab, setActiveTab] = React.useState<'all' | 'text' | 'link' | 'image'>('all');\n  const [showSettings, setShowSettings] = React.useState(false);\n  const { showToast } = useToast();\n  \n  // Use custom hooks\n  useWindowManagement();\n  \n  const {\n    clipboardData,\n    isLoading,\n    error,\n    setError,\n    selectedItem,\n    setSelectedItem,\n    fetchClipboardData,\n    deleteItem,\n    togglePin,\n    copyToClipboard,\n  } = useClipboard();\n  \n  const { filteredPinnedItems, filteredUnpinnedItems } = useFilteredClipboard(\n    clipboardData,\n    searchQuery,\n    activeTab\n  );\n\n  // Show toast for errors\n  React.useEffect(() => {\n    if (error) {\n      showToast(error, \"error\");\n      setError(null);\n    }\n  }, [error, showToast, setError]);\n\n  // Wrap operations with error handling and toast notifications\n  const handleDeleteItem = async (id: string) => {\n    try {\n      await deleteItem(id);\n      showToast(\"Item deleted successfully\", \"success\");\n    } catch (error) {\n      // Error is already handled in the hook\n    }\n  };\n\n  const handleTogglePin = async (id: string) => {\n    try {\n      await togglePin(id);\n      const item = clipboardData.find(item => item.id === id);\n      showToast(\n        item?.pinned \n          ? \"Item unpinned successfully\" \n          : \"Item pinned successfully\", \n        \"success\"\n      );\n    } catch (error) {\n      // Error is already handled in the hook\n    }\n  };\n\n  const handleCopyToClipboard = async (content: string) => {\n    try {\n      await copyToClipboard(content);\n      showToast(\"Copied to clipboard\", \"success\");\n    } catch (error) {\n      // Error is already handled in the hook\n    }\n  };\n\n  return (\n    <div \n      className={cn(\n        \"flex h-screen overflow-hidden transition-colors duration-300\",\n        `font-${fontFamily}`,\n        isDark \n          ? \"bg-dark-950/90 text-white\" \n          : \"bg-gray-50/90 text-gray-900\"\n      )}\n      style={{ \n        \"--blur-amount\": `${blurAmount}px` \n      } as React.CSSProperties}\n    >\n      {/* Unified Search Header */}\n      <ErrorBoundary>\n        <SearchHeader\n          searchQuery={searchQuery}\n          setSearchQuery={setSearchQuery}\n          activeTab={activeTab}\n          setActiveTab={setActiveTab}\n          isDark={isDark}\n          setShowSettings={setShowSettings}\n        />\n      </ErrorBoundary>\n\n      {/* Left Sidebar */}\n      <ErrorBoundary>\n        <Sidebar \n          isDark={isDark}\n          searchQuery={searchQuery}\n          setSearchQuery={setSearchQuery}\n          activeTab={activeTab}\n          setActiveTab={setActiveTab}\n          isLoading={isLoading}\n          error={error}\n          filteredPinnedItems={filteredPinnedItems}\n          filteredUnpinnedItems={filteredUnpinnedItems}\n          selectedItem={selectedItem}\n          setSelectedItem={setSelectedItem}\n          deleteItem={handleDeleteItem}\n          togglePin={handleTogglePin}\n          copyToClipboard={handleCopyToClipboard}\n          fetchClipboardData={fetchClipboardData}\n          formatDate={formatDate}\n          getTypeIcon={getTypeIcon}\n          setShowSettings={setShowSettings}\n        />\n      </ErrorBoundary>\n\n      {/* Content Panel */}\n      <ErrorBoundary>\n        <ContentPanel \n          selectedItem={selectedItem}\n          isDark={isDark}\n          togglePin={handleTogglePin}\n          copyToClipboard={handleCopyToClipboard}\n          deleteItem={handleDeleteItem}\n          formatDate={formatDate}\n        />\n      </ErrorBoundary>\n\n      {/* Settings Panel */}\n      <AnimatePresence>\n        {showSettings && (\n          <ErrorBoundary>\n            <SettingsPanel \n              theme={theme}\n              setTheme={setTheme}\n              isDark={isDark}\n              colorPalette={colorPalette}\n              setColorPalette={setColorPalette}\n              fontFamily={fontFamily}\n              setFontFamily={setFontFamily}\n              blurAmount={blurAmount}\n              setBlurAmount={setBlurAmount}\n              windowOpacity={windowOpacity}\n              setWindowOpacity={setWindowOpacity}\n              onClose={() => setShowSettings(false)}\n            />\n          </ErrorBoundary>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default function ClipboardManager() {\n  return (\n    <ErrorBoundary>\n      <ToastProvider>\n        <ClipboardManagerContent />\n      </ToastProvider>\n    </ErrorBoundary>\n  );\n}","timestamp":1745780340108,"metadata":null,"_id":"T5faPpmnjTPc5H0R"}
{"id":"12jnpdlkt","type":"text","content":"Cannot find module './components/SearchHeader' or its corresponding type declarations.ts(2307)\n","timestamp":1745781015264,"metadata":null,"_id":"UHmCcF1tNtF3rMRe"}
{"id":"ywhm6ma2n","type":"text","content":"built in 188ms.\n[82244:0428/012300.763483:ERROR:network_service_instance_impl.cc(599)] Network service crashed, restarting service.\n[82244:0428/012300.764354:ERROR:gpu_process_host.cc(997)] GPU process exited unexpectedly: exit_code=15\nError during app initialization: Error: app.disableHardwareAcceleration() can only be called before app is ready\n    at file:///Users/admin/CODE-/slate/dist-electron/main.js:4603:11\n","timestamp":1745783591561,"metadata":null,"_id":"Us7D6hjvuMsb8bFI"}
{"id":"03ua60o16","type":"text","content":"import * as React from \"react\";\nimport { ClipboardItem } from \"../types\";\n\n// Make sure we're using the correct window type with our extended ipcRenderer\ndeclare global {\n  interface Window {\n    ipcRenderer: Electron.IpcRenderer & {\n      getClipboardData(): Promise<ClipboardItem[]>;\n      deleteClipboardData(id: string): Promise<boolean>;\n      pinClipboardData(id: string): Promise<ClipboardItem>;\n      unpinClipboardData(id: string): Promise<ClipboardItem>;\n      copyToClipboard(content: string): Promise<boolean>;\n      getPinnedClipboardData(): Promise<ClipboardItem[]>;\n      setWindowOpacity(opacity: number): Promise<void>;\n    };\n  }\n}\n\nexport function useClipboard() {\n  const [clipboardData, setClipboardData] = React.useState<ClipboardItem[]>([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [error, setError] = React.useState<string | null>(null);\n  const [selectedItem, setSelectedItem] = React.useState<ClipboardItem | null>(null);\n  const [isElectronAvailable, setIsElectronAvailable] = React.useState<boolean>(false);\n\n  // Check if Electron IPC is available\n  React.useEffect(() => {\n    const checkElectronAvailability = () => {\n      const available = typeof window !== 'undefined' && \n                        window.ipcRenderer !== undefined && \n                        typeof window.ipcRenderer.getClipboardData === 'function';\n      \n      setIsElectronAvailable(available);\n      \n      if (!available) {\n        console.error(\"Electron IPC is not available. Running in browser mode?\");\n        setError(\"Clipboard manager requires Electron environment\");\n        setIsLoading(false);\n      }\n    };\n    \n    checkElectronAvailability();\n  }, []);\n\n  // Fetch clipboard data\n  const fetchClipboardData = React.useCallback(async () => {\n    if (!isElectronAvailable) {\n      // If we're not in Electron, set some mock data for development\n      setClipboardData([\n        {\n          id: 'mock-1',\n          content: 'This is mock clipboard data for development',\n          type: 'text',\n          timestamp: Date.now(),\n          pinned: false\n        }\n      ]);\n      setIsLoading(false);\n      return;\n    }\n    \n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      const data = await window.ipcRenderer.getClipboardData();\n      \n      // Ensure we have valid data before setting state\n      if (Array.isArray(data)) {\n        setClipboardData(data.sort((a, b) => b.timestamp - a.timestamp));\n      } else {\n        console.error(\"Invalid clipboard data format:\", data);\n        setError(\"Received invalid clipboard data format\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching clipboard data:\", error);\n      setError(\"Failed to load clipboard data. Please try again.\");\n      \n      // Set empty array to prevent undefined errors\n      setClipboardData([]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isElectronAvailable]);\n\n  React.useEffect(() => {\n    fetchClipboardData();\n    \n    // Only set up event listeners if Electron is available\n    if (isElectronAvailable) {\n      // Set up event listener for clipboard updates\n      const handleClipboardUpdate = () => {\n        fetchClipboardData();\n      };\n      \n      window.ipcRenderer.on('clipboard-item-added', handleClipboardUpdate);\n      \n      return () => {\n        window.ipcRenderer.off('clipboard-item-added', handleClipboardUpdate);\n      };\n    }\n  }, [fetchClipboardData, isElectronAvailable]);\n\n  const deleteItem = async (id: string) => {\n    if (!isElectronAvailable) {\n      setError(\"Cannot delete items in browser mode\");\n      throw new Error(\"Electron IPC not available\");\n    }\n    \n    try {\n      const success = await window.ipcRenderer.deleteClipboardData(id);\n      if (success) {\n        setClipboardData((prevData) => prevData.filter((item) => item.id !== id));\n        if (selectedItem?.id === id) {\n          setSelectedItem(null);\n        }\n      } else {\n        throw new Error(`Failed to delete clipboard item with ID: ${id}`);\n      }\n    } catch (error) {\n      console.error(\"Error deleting clipboard item:\", error);\n      setError(\"Failed to delete item. Please try again.\");\n      throw error; // Re-throw for error boundary\n    }\n  };\n\n  const togglePin = async (id: string) => {\n    if (!isElectronAvailable) {\n      setError(\"Cannot pin items in browser mode\");\n      throw new Error(\"Electron IPC not available\");\n    }\n    \n    try {\n      const item = clipboardData.find(item => item.id === id);\n      if (!item) return;\n      \n      const updatedItem = item.pinned \n        ? await window.ipcRenderer.unpinClipboardData(id)\n        : await window.ipcRenderer.pinClipboardData(id);\n        \n      if (updatedItem) {\n        setClipboardData((prevData) =>\n          prevData.map((item) => (item.id === id ? updatedItem : item))\n        );\n        \n        if (selectedItem?.id === id) {\n          setSelectedItem(updatedItem);\n        }\n      } else {\n        throw new Error(`Failed to ${item.pinned ? 'unpin' : 'pin'} clipboard item with ID: ${id}`);\n      }\n    } catch (error) {\n      console.error(\"Error toggling pin status:\", error);\n      setError(`Failed to toggle pin status. Please try again.`);\n      throw error; // Re-throw for error boundary\n    }\n  };\n\n  const copyToClipboard = async (content: string) => {\n    if (!isElectronAvailable) {\n      // Fallback to browser clipboard API if available\n      try {\n        await navigator.clipboard.writeText(content);\n        return;\n      } catch (browserError) {\n        console.error(\"Browser clipboard API failed:\", browserError);\n        setError(\"Cannot access clipboard in this environment\");\n        throw new Error(\"Clipboard access not available\");\n      }\n    }\n    \n    try {\n      const success = await window.ipcRenderer.copyToClipboard(content);\n      if (!success) {\n        throw new Error(\"Failed to copy to clipboard\");\n      }\n    } catch (error) {\n      console.error(\"Error copying to clipboard:\", error);\n      setError(\"Failed to copy to clipboard. Please try again.\");\n      throw error; // Re-throw for error boundary\n    }\n  };\n\n  return {\n    clipboardData,\n    isLoading,\n    error,\n    setError,\n    selectedItem,\n    setSelectedItem,\n    fetchClipboardData,\n    deleteItem,\n    togglePin,\n    copyToClipboard,\n    isElectronAvailable\n  };\n}","timestamp":1745781943481,"metadata":null,"_id":"WaWT17QpCWp0W0cV"}
{"id":"p02xfdklj","type":"text","content":"Property 'deleteClipboardData' does not exist on type 'IpcRenderer'.ts(2339)\n","timestamp":1745781120146,"metadata":null,"_id":"XAYeM8NOgRcFzgdi"}
{"id":"88qgy29lm","type":"text","content":"import * as React from \"react\";\nimport { FileText, Image, Link, File } from \"lucide-react\";\nimport { AnimatePresence } from \"framer-motion\";\nimport { useTheme } from \"./ThemeContext\";\nimport { cn } from \"./utils/cn\";\nimport { ClipboardItem } from \"./types\";\nimport { Sidebar } from \"./components/Sidebar\";\nimport { ContentPanel } from \"./components/ContentPanel\";\nimport { SettingsPanel } from \"./components/SettingsPanel\";\nimport { SearchHeader } from \"./components/SearchHeader\";\n\nexport default function ClipboardManager() {\n  const { theme, setTheme, isDark, colorPalette, setColorPalette, fontFamily, setFontFamily, blurAmount, setBlurAmount, windowOpacity, setWindowOpacity } = useTheme();\n  const [clipboardData, setClipboardData] = React.useState<ClipboardItem[]>([]);\n  const [searchQuery, setSearchQuery] = React.useState(\"\");\n  const [selectedItem, setSelectedItem] = React.useState<ClipboardItem | null>(null);\n  const [activeTab, setActiveTab] = React.useState<'all' | 'text' | 'link' | 'image'>('all');\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [error, setError] = React.useState<string | null>(null);\n  const [showSettings, setShowSettings] = React.useState(false);\n\n  // Handle window blur to close the app\n  React.useEffect(() => {\n    const handleWindowBlur = () => {\n      // Send a message to the main process to hide the window\n      window.ipcRenderer.send('hide-window');\n    };\n\n    window.addEventListener('blur', handleWindowBlur);\n    \n    return () => {\n      window.removeEventListener('blur', handleWindowBlur);\n    };\n  }, []);\n\n  // Fetch clipboard data\n  const fetchClipboardData = React.useCallback(async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const data = await window.ipcRenderer.getClipboardData();\n      setClipboardData(data.sort((a, b) => b.timestamp - a.timestamp));\n    } catch (error) {\n      console.error(\"Error fetching clipboard data:\", error);\n      setError(\"Failed to load clipboard data. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    fetchClipboardData();\n    \n    // Set up event listener for clipboard updates\n    const handleClipboardUpdate = () => {\n      fetchClipboardData();\n    };\n    \n    window.ipcRenderer.on('clipboard-item-added', handleClipboardUpdate);\n    \n    return () => {\n      window.ipcRenderer.off('clipboard-item-added', handleClipboardUpdate);\n    };\n  }, [fetchClipboardData]);\n\n  // Segregate pinned and unpinned items\n  const pinnedItems = React.useMemo(() => \n    clipboardData.filter((item) => item.pinned), \n    [clipboardData]\n  );\n  \n  const unpinnedItems = React.useMemo(() => \n    clipboardData.filter((item) => !item.pinned), \n    [clipboardData]\n  );\n\n  // Filter items based on search query and active tab\n  const filteredPinnedItems = React.useMemo(() => \n    pinnedItems.filter((item) =>\n      item.content.toLowerCase().includes(searchQuery.toLowerCase()) &&\n      (activeTab === 'all' || item.type === activeTab)\n    ), \n    [pinnedItems, searchQuery, activeTab]\n  );\n  \n  const filteredUnpinnedItems = React.useMemo(() => \n    unpinnedItems.filter((item) =>\n      item.content.toLowerCase().includes(searchQuery.toLowerCase()) &&\n      (activeTab === 'all' || item.type === activeTab)\n    ), \n    [unpinnedItems, searchQuery, activeTab]\n  );\n\n  const deleteItem = async (id: string) => {\n    try {\n      const success = await window.ipcRenderer.deleteClipboardData(id);\n      if (success) {\n        setClipboardData((prevData) => prevData.filter((item) => item.id !== id));\n        if (selectedItem?.id === id) {\n          setSelectedItem(null);\n        }\n      } else {\n        throw new Error(`Failed to delete clipboard item with ID: ${id}`);\n      }\n    } catch (error) {\n      console.error(\"Error deleting clipboard item:\", error);\n      setError(\"Failed to delete item. Please try again.\");\n    }\n  };\n\n  const togglePin = async (id: string) => {\n    try {\n      const item = clipboardData.find(item => item.id === id);\n      if (!item) return;\n      \n      const updatedItem = item.pinned \n        ? await window.ipcRenderer.unpinClipboardData(id)\n        : await window.ipcRenderer.pinClipboardData(id);\n        \n      if (updatedItem) {\n        setClipboardData((prevData) =>\n          prevData.map((item) => (item.id === id ? updatedItem : item))\n        );\n        \n        if (selectedItem?.id === id) {\n          setSelectedItem(updatedItem);\n        }\n      } else {\n        throw new Error(`Failed to ${item.pinned ? 'unpin' : 'pin'} clipboard item with ID: ${id}`);\n      }\n    } catch (error) {\n      console.error(\"Error toggling pin status:\", error);\n      setError(`Failed to toggle pin status. Please try again.`);\n    }\n  };\n\n  const copyToClipboard = async (content: string) => {\n    try {\n      const success = await window.ipcRenderer.copyToClipboard(content);\n      if (!success) {\n        throw new Error(\"Failed to copy to clipboard\");\n      }\n    } catch (error) {\n      console.error(\"Error copying to clipboard:\", error);\n      setError(\"Failed to copy to clipboard. Please try again.\");\n    }\n  };\n\n  const formatDate = (timestamp: number) => {\n    const date = new Date(timestamp);\n    return date.toLocaleString();\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'text':\n        return <FileText className=\"h-3.5 w-3.5 text-blue-500\" />;\n      case 'image':\n        return <Image className=\"h-3.5 w-3.5 text-purple-500\" />;\n      case 'link':\n        return <Link className=\"h-3.5 w-3.5 text-green-500\" />;\n      default:\n        return <File className=\"h-3.5 w-3.5 text-gray-500\" />;\n    }\n  };\n\n  return (\n    <div \n      className={cn(\n        \"flex h-screen overflow-hidden transition-colors duration-300\",\n        `font-${fontFamily}`,\n        isDark \n          ? \"bg-dark-950/90 text-white\" \n          : \"bg-gray-50/90 text-gray-900\"\n      )}\n      style={{ \n        \"--blur-amount\": `${blurAmount}px` \n      } as React.CSSProperties}\n    >\n      {/* Unified Search Header */}\n      <SearchHeader\n        searchQuery={searchQuery}\n        setSearchQuery={setSearchQuery}\n        activeTab={activeTab}\n        setActiveTab={setActiveTab}\n        isDark={isDark}\n        setShowSettings={setShowSettings}\n      />\n\n      {/* Left Sidebar */}\n      <Sidebar \n        isDark={isDark}\n        searchQuery={searchQuery}\n        setSearchQuery={setSearchQuery}\n        activeTab={activeTab}\n        setActiveTab={setActiveTab}\n        isLoading={isLoading}\n        error={error}\n        filteredPinnedItems={filteredPinnedItems}\n        filteredUnpinnedItems={filteredUnpinnedItems}\n        selectedItem={selectedItem}\n        setSelectedItem={setSelectedItem}\n        deleteItem={deleteItem}\n        togglePin={togglePin}\n        copyToClipboard={copyToClipboard}\n        fetchClipboardData={fetchClipboardData}\n        formatDate={formatDate}\n        getTypeIcon={getTypeIcon}\n        setShowSettings={setShowSettings}\n      />\n\n      {/* Content Panel */}\n      <ContentPanel \n        selectedItem={selectedItem}\n        isDark={isDark}\n        togglePin={togglePin}\n        copyToClipboard={copyToClipboard}\n        deleteItem={deleteItem}\n        formatDate={formatDate}\n      />\n\n      {/* Settings Panel */}\n      <AnimatePresence>\n        {showSettings && (\n          <SettingsPanel \n            theme={theme}\n            setTheme={setTheme}\n            isDark={isDark}\n            colorPalette={colorPalette}\n            setColorPalette={setColorPalette}\n            fontFamily={fontFamily}\n            setFontFamily={setFontFamily}\n            blurAmount={blurAmount}\n            setBlurAmount={setBlurAmount}\n            windowOpacity={windowOpacity}\n            setWindowOpacity={setWindowOpacity}\n            onClose={() => setShowSettings(false)}\n          />\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}","timestamp":1745780070449,"metadata":null,"_id":"alHIG5kgOgUnaMM8"}
{"id":"pz3lw9a5d","type":"text","content":"[88900:0428/013027.022682:ERROR:gpu_process_host.cc(997)] GPU process exited unexpectedly: exit_code=15\n[88900:0428/013027.032494:ERROR:network_service_instance_impl.cc(599)] Network service crashed, restarting service.","timestamp":1745784030756,"metadata":null,"_id":"buBYMXdfxEcmqiqV"}
{"id":"nkhfdxvzx","type":"text","content":"upOptions.external`\ntransforming (14) node_modules/nedb/lib/indexes.jsWindow blurred, but not hiding automatically\nPreventing auto-hide after shortcut activation\n2025-04-28 01:31:51.855 Electron[89302:6352684] +[IMKClient subclass]: chose IMKClient_Modern\n2025-04-28 01:31:51.855 Electron[89302:6352684] +[IMKInputSession subclass]: chose IMKInputSession_Modern\nWindow blurred, but not hiding automatically\nWindow blurred, but not hiding automatically\nPreventing auto-hide after shortcut activation\nWindow blurred, but not hiding automatically\nPreventing auto-hide after shortcut activation","timestamp":1745784143710,"metadata":null,"_id":"diZEBEIpyOAoWsd2"}
{"id":"tvg3dkehj","type":"text","content":"Error during app initialization: ReferenceError: require is not defined\n    at file:///Users/admin/CODE-/slate/dist-electron/main.js:4598:37\n","timestamp":1745782836389,"metadata":null,"_id":"hY89Lrmscul2mkeH"}
{"id":"e6t8flanj","type":"text","content":"import { IpcRenderer } from 'electron';\nimport { ClipboardItem } from './types';\n\ndeclare global {\n  interface Window {\n    ipcRenderer: IpcRenderer & {\n      getClipboardData(): Promise<ClipboardItem[]>;\n      deleteClipboardData(id: string): Promise<boolean>;\n      pinClipboardData(id: string): Promise<ClipboardItem>;\n      copyToClipboard(content: string): Promise<boolean>;\n      unpinClipboardData(id: string): Promise<ClipboardItem>;\n      getPinnedClipboardData(): Promise<ClipboardItem[]>;\n      invoke(channel: string, ...args: any[]): Promise<any>;\n      send(channel: string, ...args: any[]): void;\n      on(channel: string, listener: (...args: any[]) => void): IpcRenderer;\n      once(channel: string, listener: (...args: any[]) => void): IpcRenderer;\n      off(channel: string, listener: (...args: any[]) => void): IpcRenderer;\n    };\n  }\n}\n\nexport {};","timestamp":1745781171508,"metadata":null,"_id":"lfXOeEFGPmsqmz5F"}
{"id":"gowmhmgax","type":"text","content":"Property 'getClipboardData' does not exist on type 'IpcRenderer'.ts(2339)\n","timestamp":1745781178554,"metadata":null,"_id":"srysGpo7VSZoNOXG"}
{"id":"ril94hmd2","type":"text","content":"import * as React from \"react\"; import { AnimatePresence } from \"framer-motion\"; import { useTheme } from \"./ThemeContext\"; import { cn } from \"./utils/cn\"; import { Sidebar } from \"./components/Sidebar\"; import { ContentPanel } from \"./components/ContentPanel\"; import { SettingsPanel } from \"./components/SettingsPanel\"; import { SearchHeader } from \"./components/SearchHeader\"; import { useClipboard } from \"./hooks/useClipboard\"; import { useFilteredClipboard } from \"./hooks/useFilteredClipboard\"; import { useWindowManagement } from \"./hooks/useWindowManagement\"; import { formatDate, getTypeIcon } from \"./utils/clipboardUtils\"; import { ErrorBoundary } from \"./components/ErrorBoundary\"; import { ToastProvider, useToast } from \"./components/Toast\"; const ClipboardManagerContent: React.FC = () => { const { theme, setTheme, isDark, colorPalette, setColorPalette, fontFamily, setFontFamily, blurAmount, setBlurAmount, windowOpacity, setWindowOpacity } = useTheme(); const [searchQuery, setSearchQuery] = React.useState(\"\"); const [activeTab, setActiveTab] = React.useState<'all' | 'text' | 'link' | 'image'>('all'); const [showSettings, setShowSettings] = React.useState(false); const { showToast } = useToast(); // Use custom hooks useWindowManagement(); const { clipboardData, isLoading, error, setError, selectedItem, setSelectedItem, fetchClipboardData, deleteItem, togglePin, copyToClipboard, isElectronAvailable } = useClipboard(); const { filteredPinnedItems, filteredUnpinnedItems } = useFilteredClipboard( clipboardData, searchQuery, activeTab ); // Show toast for errors React.useEffect(() => { if (error) { showToast(error, \"error\"); setError(null); } }, [error, showToast, setError]); // Wrap operations with error handling and toast notifications const handleDeleteItem = async (id: string) => { try { await deleteItem(id); showToast(\"Item deleted successfully\", \"success\"); } catch (error) { // Error is already handled in the hook } }; const handleTogglePin = async (id: string) => { try { await togglePin(id); const item = clipboardData.find(item => item.id === id); showToast( item?.pinned ? \"Item unpinned successfully\" : \"Item pinned successfully\", \"success\" ); } catch (error) { // Error is already handled in the hook } }; const handleCopyToClipboard = async (content: string) => { try { await copyToClipboard(content); showToast(\"Copied to clipboard\", \"success\"); } catch (error) { // Error is already handled in the hook } }; return ( <div className={cn( \"flex h-screen overflow-hidden transition-colors duration-300\", `font-${fontFamily}`, isDark ? \"bg-dark-950/90 text-white\" : \"bg-gray-50/90 text-gray-900\" )} style={{ \"--blur-amount\": `${blurAmount}px` } as React.CSSProperties} > {!isElectronAvailable && !isLoading && ( <div className=\"fixed inset-0 flex items-center justify-center z-50 bg-dark-900/80 backdrop-blur-md\"> <div className=\"bg-white dark:bg-dark-800 p-6 rounded-lg shadow-xl max-w-md text-center\"> <h2 className=\"text-xl font-semibold mb-4\">Electron Environment Required</h2> <p className=\"mb-4\"> The clipboard manager requires the Electron environment to function properly. It appears you're running the app in a browser or the Electron IPC bridge is not available. </p> <button onClick={() => window.location.reload()} className=\"px-4 py-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors\" > Reload Application </button> </div> </div> )} {/* Unified Search Header */} <ErrorBoundary> <SearchHeader searchQuery={searchQuery} setSearchQuery={setSearchQuery} activeTab={activeTab} setActiveTab={setActiveTab} isDark={isDark} setShowSettings={setShowSettings} /> </ErrorBoundary> {/* Left Sidebar */} <ErrorBoundary> <Sidebar isDark={isDark} searchQuery={searchQuery} setSearchQuery={setSearchQuery} activeTab={activeTab} setActiveTab={setActiveTab} isLoading={isLoading} error={error} filteredPinnedItems={filteredPinnedItems} filteredUnpinnedItems={filteredUnpinnedItems} selectedItem={selectedItem} setSelectedItem={setSelectedItem} deleteItem={handleDeleteItem} togglePin={handleTogglePin} copyToClipboard={handleCopyToClipboard} fetchClipboardData={fetchClipboardData} formatDate={formatDate} getTypeIcon={getTypeIcon} setShowSettings={setShowSettings} /> </ErrorBoundary> {/* Content Panel */} <ErrorBoundary> <ContentPanel selectedItem={selectedItem} isDark={isDark} togglePin={handleTogglePin} copyToClipboard={handleCopyToClipboard} deleteItem={handleDeleteItem} formatDate={formatDate} /> </ErrorBoundary> {/* Settings Panel */} <AnimatePresence> {showSettings && ( <ErrorBoundary> <SettingsPanel theme={theme} setTheme={setTheme} isDark={isDark} colorPalette={colorPalette} setColorPalette={setColorPalette} fontFamily={fontFamily} setFontFamily={setFontFamily} blurAmount={blurAmount} setBlurAmount={setBlurAmount} windowOpacity={windowOpacity} setWindowOpacity={setWindowOpacity} onClose={() => setShowSettings(false)} /> </ErrorBoundary> )} </AnimatePresence> </div> ); }; export default function ClipboardManager() { return ( <ErrorBoundary> <ToastProvider> <ClipboardManagerContent /> </ToastProvider> </ErrorBoundary> ); }\n","timestamp":1745784390400,"metadata":null,"_id":"t5cCga5ExSjmX0dr"}
{"id":"hm3gv66fu","type":"text","content":"getClipboardData","timestamp":1745781241548,"metadata":null,"_id":"tNuHuGIBf0GseV5j"}
{"id":"qk2k7ojlz","type":"text","content":"Uncaught TypeError: window.ipcRenderer.setWindowOpacity is not a function\n    at ThemeContext.tsx:265:24\n    at commitHookEffectListMount (chunk-PJEEZAML.js?v=90771906:16915:34)\n    at commitPassiveMountOnFiber (chunk-PJEEZAML.js?v=90771906:18156:19)\n    at commitPassiveMountEffects_complete (chunk-PJEEZAML.js?v=90771906:18129:17)\n    at commitPassiveMountEffects_begin (chunk-PJEEZAML.js?v=90771906:18119:15)\n    at commitPassiveMountEffects (chunk-PJEEZAML.js?v=90771906:18109:11)\n    at flushPassiveEffectsImpl (chunk-PJEEZAML.js?v=90771906:19490:11)\n    at flushPassiveEffects (chunk-PJEEZAML.js?v=90771906:19447:22)\n    at chunk-PJEEZAML.js?v=90771906:19328:17\n    at workLoop (chunk-PJEEZAML.js?v=90771906:197:42)\nchunk-PJEEZAML.js?v=90771906:16670 Uncaught TypeError: window.ipcRenderer.setWindowOpacity is not a function\n    at ThemeContext.tsx:265:24\n    at commitHookEffectListMount (chunk-PJEEZAML.js?v=90771906:16915:34)\n    at invokePassiveEffectMountInDEV (chunk-PJEEZAML.js?v=90771906:18324:19)\n    at invokeEffectsInDev (chunk-PJEEZAML.js?v=90771906:19701:19)\n    at commitDoubleInvokeEffectsInDEV (chunk-PJEEZAML.js?v=90771906:19686:15)\n    at flushPassiveEffectsImpl (chunk-PJEEZAML.js?v=90771906:19503:13)\n    at flushPassiveEffects (chunk-PJEEZAML.js?v=90771906:19447:22)\n    at chunk-PJEEZAML.js?v=90771906:19328:17\n    at workLoop (chunk-PJEEZAML.js?v=90771906:197:42)\n    at flushWork (chunk-PJEEZAML.js?v=90771906:176:22)\n2chunk-PJEEZAML.js?v=90771906:14032 The above error occurred in the <ThemeProvider> component:\n\n    at ThemeProvider (http://localhost:5173/src/ThemeContext.tsx:76:33)\n\nConsider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.\nlogCapturedError @ chunk-PJEEZAML.js?v=90771906:14032\nShow 1 more frame\nShow less\nchunk-PJEEZAML.js?v=90771906:9129 Uncaught TypeError: window.ipcRenderer.setWindowOpacity is not a function\n    at ThemeContext.tsx:265:24\n    at commitHookEffectListMount (chunk-PJEEZAML.js?v=90771906:16915:34)\n    at commitPassiveMountOnFiber (chunk-PJEEZAML.js?v=90771906:18156:19)\n    at commitPassiveMountEffects_complete (chunk-PJEEZAML.js?v=90771906:18129:17)\n    at commitPassiveMountEffects_begin (chunk-PJEEZAML.js?v=90771906:18119:15)\n    at commitPassiveMountEffects (chunk-PJEEZAML.js?v=90771906:18109:11)\n    at flushPassiveEffectsImpl (chunk-PJEEZAML.js?v=90771906:19490:11)\n    at flushPassiveEffects (chunk-PJEEZAML.js?v=90771906:19447:22)\n    at chunk-PJEEZAML.js?v=90771906:19328:17\n    at workLoop (chunk-PJEEZAML.js?v=90771906:197:42)","timestamp":1745782182792,"metadata":null,"_id":"uoYPT0t80LsBy8uq"}
{"id":"nwfyo2i8g","type":"text","content":"but why i am seeing only blank screen when i open","timestamp":1745781858340,"metadata":null,"_id":"woX8PUpnxeVUARZq"}
{"id":"rkz8irysz","type":"text","content":"import React, { createContext, useContext, useState, useEffect } from 'react';\n\ntype Theme = 'light' | 'dark' | 'system';\ntype ColorPalette = \n  | 'default' \n  | 'blue' \n  | 'purple' \n  | 'green' \n  | 'orange' \n  | 'pink' \n  | 'cyan' \n  | 'amber' \n  | 'indigo' \n  | 'rose' \n  | 'teal' \n  | 'emerald' \n  | 'violet' \n  | 'fuchsia' \n  | 'lime';\n\ntype FontFamily = \n  | 'system' \n  | 'inter' \n  | 'roboto' \n  | 'poppins' \n  | 'montserrat' \n  | 'playfair' \n  | 'source-code-pro' \n  | 'open-sans' \n  | 'lato' \n  | 'merriweather' \n  | 'raleway' \n  | 'ubuntu' \n  | 'nunito' \n  | 'fira-code';\n\n// New theme preset type\ntype ThemePreset = 'default' | 'minimal' | 'elegant' | 'vibrant' | 'professional' | 'creative' | 'modern' | 'classic' | 'futuristic';\n\n// Theme preset configurations\ninterface PresetConfig {\n  colorPalette: ColorPalette;\n  fontFamily: FontFamily;\n  blurAmount: number;\n  windowOpacity: number;\n}\n\nconst themePresets: Record<ThemePreset, PresetConfig> = {\n  default: {\n    colorPalette: 'default',\n    fontFamily: 'system',\n    blurAmount: 10,\n    windowOpacity: 0.95\n  },\n  minimal: {\n    colorPalette: 'blue',\n    fontFamily: 'inter',\n    blurAmount: 5,\n    windowOpacity: 0.9\n  },\n  elegant: {\n    colorPalette: 'indigo',\n    fontFamily: 'playfair',\n    blurAmount: 15,\n    windowOpacity: 0.92\n  },\n  vibrant: {\n    colorPalette: 'fuchsia',\n    fontFamily: 'poppins',\n    blurAmount: 12,\n    windowOpacity: 0.97\n  },\n  professional: {\n    colorPalette: 'teal',\n    fontFamily: 'montserrat',\n    blurAmount: 8,\n    windowOpacity: 0.93\n  },\n  creative: {\n    colorPalette: 'amber',\n    fontFamily: 'nunito',\n    blurAmount: 14,\n    windowOpacity: 0.96\n  },\n  modern: {\n    colorPalette: 'cyan',\n    fontFamily: 'roboto',\n    blurAmount: 10,\n    windowOpacity: 0.94\n  },\n  classic: {\n    colorPalette: 'emerald',\n    fontFamily: 'merriweather',\n    blurAmount: 7,\n    windowOpacity: 0.91\n  },\n  futuristic: {\n    colorPalette: 'violet',\n    fontFamily: 'fira-code',\n    blurAmount: 18,\n    windowOpacity: 0.98\n  }\n};\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  isDark: boolean;\n  colorPalette: ColorPalette;\n  setColorPalette: (palette: ColorPalette) => void;\n  fontFamily: FontFamily;\n  setFontFamily: (font: FontFamily) => void;\n  blurAmount: number;\n  setBlurAmount: (amount: number) => void;\n  windowOpacity: number;\n  setWindowOpacity: (opacity: number) => void;\n  // New preset functionality\n  currentPreset: ThemePreset;\n  applyPreset: (preset: ThemePreset) => void;\n  availablePresets: ThemePreset[];\n  // Color palette and font options\n  availableColorPalettes: ColorPalette[];\n  availableFonts: FontFamily[];\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>('system');\n  const [isDark, setIsDark] = useState(false);\n  const [colorPalette, setColorPalette] = useState<ColorPalette>('default');\n  const [fontFamily, setFontFamily] = useState<FontFamily>('system');\n  const [blurAmount, setBlurAmount] = useState<number>(10);\n  const [windowOpacity, setWindowOpacity] = useState<number>(0.95);\n  const [currentPreset, setCurrentPreset] = useState<ThemePreset>('default');\n\n  // Available options\n  const availableColorPalettes: ColorPalette[] = [\n    'default', 'blue', 'purple', 'green', 'orange', 'pink', 'cyan', \n    'amber', 'indigo', 'rose', 'teal', 'emerald', 'violet', 'fuchsia', 'lime'\n  ];\n  \n  const availableFonts: FontFamily[] = [\n    'system', 'inter', 'roboto', 'poppins', 'montserrat', 'playfair', \n    'source-code-pro', 'open-sans', 'lato', 'merriweather', 'raleway', \n    'ubuntu', 'nunito', 'fira-code'\n  ];\n  \n  const availablePresets: ThemePreset[] = [\n    'default', 'minimal', 'elegant', 'vibrant', 'professional', \n    'creative', 'modern', 'classic', 'futuristic'\n  ];\n\n  // Apply a theme preset\n  const applyPreset = (preset: ThemePreset) => {\n    const config = themePresets[preset];\n    setColorPalette(config.colorPalette);\n    setFontFamily(config.fontFamily);\n    setBlurAmount(config.blurAmount);\n    setWindowOpacity(config.windowOpacity);\n    setCurrentPreset(preset);\n    localStorage.setItem('themePreset', preset);\n  };\n\n  useEffect(() => {\n    const storedTheme = localStorage.getItem('theme') as Theme | null;\n    const storedPalette = localStorage.getItem('colorPalette') as ColorPalette | null;\n    const storedFont = localStorage.getItem('fontFamily') as FontFamily | null;\n    const storedBlur = localStorage.getItem('blurAmount');\n    const storedOpacity = localStorage.getItem('windowOpacity');\n    const storedPreset = localStorage.getItem('themePreset') as ThemePreset | null;\n\n    if (storedPreset) {\n      applyPreset(storedPreset);\n    } else {\n      if (storedTheme) setTheme(storedTheme);\n      if (storedPalette) setColorPalette(storedPalette);\n      if (storedFont) setFontFamily(storedFont);\n      if (storedBlur) setBlurAmount(parseInt(storedBlur));\n      if (storedOpacity) setWindowOpacity(parseFloat(storedOpacity));\n    }\n  }, []);\n\n  // Detect when settings have changed from a preset\n  useEffect(() => {\n    const currentConfig = {\n      colorPalette,\n      fontFamily,\n      blurAmount,\n      windowOpacity\n    };\n    \n    // Check if current settings match any preset\n    const matchingPreset = Object.entries(themePresets).find(\n      ([_, config]) => \n        config.colorPalette === currentConfig.colorPalette &&\n        config.fontFamily === currentConfig.fontFamily &&\n        config.blurAmount === currentConfig.blurAmount &&\n        config.windowOpacity === currentConfig.windowOpacity\n    );\n    \n    if (matchingPreset) {\n      setCurrentPreset(matchingPreset[0] as ThemePreset);\n    } else if (currentPreset !== 'default') {\n      // If settings don't match any preset, we're in a custom state\n      setCurrentPreset('default');\n    }\n  }, [colorPalette, fontFamily, blurAmount, windowOpacity]);\n\n  useEffect(() => {\n    localStorage.setItem('theme', theme);\n    \n    if (theme === 'system') {\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      setIsDark(prefersDark);\n      \n      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n      const handler = (e: MediaQueryListEvent) => setIsDark(e.matches);\n      mediaQuery.addEventListener('change', handler);\n      return () => mediaQuery.removeEventListener('change', handler);\n    } else {\n      setIsDark(theme === 'dark');\n    }\n  }, [theme]);\n\n  useEffect(() => {\n    localStorage.setItem('colorPalette', colorPalette);\n    document.documentElement.setAttribute('data-palette', colorPalette);\n    \n    // Set RGB variables for opacity calculations\n    const rgbValues = {\n      default: '16, 185, 129',\n      blue: '59, 130, 246',\n      purple: '139, 92, 246',\n      green: '34, 197, 94',\n      orange: '249, 115, 22',\n      pink: '236, 72, 153',\n      cyan: '6, 182, 212',\n      amber: '245, 158, 11',\n      indigo: '99, 102, 241',\n      rose: '244, 63, 94',\n      teal: '20, 184, 166',\n      emerald: '16, 185, 129',\n      violet: '139, 92, 246',\n      fuchsia: '217, 70, 239',\n      lime: '132, 204, 22'\n    }[colorPalette];\n    \n    document.documentElement.style.setProperty('--primary-color-rgb', rgbValues);\n  }, [colorPalette]);\n\n  useEffect(() => {\n    localStorage.setItem('fontFamily', fontFamily);\n    document.documentElement.setAttribute('data-font', fontFamily);\n  }, [fontFamily]);\n\n  useEffect(() => {\n    localStorage.setItem('blurAmount', blurAmount.toString());\n    document.documentElement.style.setProperty('--blur-amount', `${blurAmount}px`);\n  }, [blurAmount]);\n\n  useEffect(() => {\n    localStorage.setItem('windowOpacity', windowOpacity.toString());\n    // Apply window opacity via electron\n    window.ipcRenderer.setWindowOpacity(windowOpacity);\n  }, [windowOpacity]);\n\n  return (\n    <ThemeContext.Provider value={{\n      theme,\n      setTheme,\n      isDark,\n      colorPalette,\n      setColorPalette,\n      fontFamily,\n      setFontFamily,\n      blurAmount,\n      setBlurAmount,\n      windowOpacity,\n      setWindowOpacity,\n      currentPreset,\n      applyPreset,\n      availablePresets,\n      availableColorPalettes,\n      availableFonts\n    }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}","timestamp":1745781955071,"metadata":null,"_id":"yBL3kkPUzPDrFB82"}
{"id":"2g3r7bhfs","type":"text","content":"bro fix the ui and make it neat and cool amazing and nothing should overlap and remove the glassmorphism ","timestamp":1745784592494,"metadata":null,"_id":"7Vvs8hF9133RqICt"}
{"id":"murlpd91u","type":"text","content":"bro fix the ui and make it neat and cool amazing and nothing should overlap and remove the glassmorphism \n\n","timestamp":1745784647997,"metadata":null,"_id":"yOQbRGv9CDxhOSyx"}
